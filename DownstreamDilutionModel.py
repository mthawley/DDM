# -*- coding: utf-8 -*-
# Downstream Dilution Model (circa 2015)
#
# BIG NOTE - Unit of analysis is entityID NOT species name
#    Some species have several entityIDs and they are treated separately
#
# Input Files:
#   - need subfolders located in 'mainpath' folder:
#            - 'csv_streams' --> nhd+ csv files for species range and critical habitat (from Jen)
#            - 'ca3t_results' --> ca3t files for individual and all use uses
#    - species master list file (generated by Jen)
#    - chemical specific concentration data file (values for each use for each huc2) that looks like:
#
#        nurseries,1120,2770,2540,1550,2120,2540,1520,3600,1640,2860,989,1780,1910,1630,8500,1140,6530,8390
#        vegetables,3610,3140,4800,2840,2920,4910,2040,6920,4820,2660,2360,2470,2900,2490,18400,1680,4500,9320
#        orchards,16000,12200,11100,9760,9140,6770,11700,37400,9540,6160,5760,5550,12700,20200,100000,3280,12000,9940
#        alluses,42800,41800,58100,51000,33700,34600,21500,74300,63000,51400,13900,14700,57200,42500,239000,13500,62800,23200
#    
#  Additional input parameters are currently set in main (chemical name, directory, step 1 or 2, spatial layer filenames, input file names, etc.)           
#
from __future__ import division
import os
import glob
import pandas as pd
import numpy as np
import datetime

def find_cooccurrence(species_loc,nhd_allocation_file):
    try:
                
        species_stream_km = species_loc['LENGTHKM']
        
        # FutureWarning: convert_objects is deprecated.  Use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.
        total_km = species_stream_km.sum()
        species_comids = species_loc[['COMID','LENGTHKM']]
        species_comids['COMID'] = species_comids['COMID'].astype(int)
                
        # fix data type for nhd_allocation_file should probably do this somewhere else when running....
        nhd_allocation_file['COMID'] = nhd_allocation_file['COMID'].astype(int)
        cooccur = pd.merge(nhd_allocation_file,species_comids,left_on='COMID',right_on='COMID')
                   
        km_cooccur = cooccur['LENGTHKM'].sum()
        if len(cooccur) > 0:
            pct_cooccur = round(km_cooccur/total_km,2)
        else:
            km_cooccur = 0    
        #print('length of cooccur = ' + km_cooccur)
            
        return pct_cooccur,km_cooccur,total_km
                                                                               
    except IOError:
        
        print 'it no work'
        return None 
        
def downstream(chemical_threshold_Fn,nhdplus_use_accumuation_Fn,inStep,outfile,range_log,CH_log,speciesFn):
        
    # File with species name, ESA group and HUC2s, just going to loop through this file (email Jen Connolly 10/5/2015, file on sharepoint)   
    try:
        species_file = pd.read_csv(speciesFn)
    except:
        print('Could not find file' + speciesFn)
        
    # Thresholds from Kris Garber email 10/5/2015 
    # Step 1 threshold
    max_threshold = 0.044
    # Step 2 thresholds
    direct_fish_and_amphibians = 0.47
    direct_aquatic_invertebrates = 0.044
    direct_plants = 500 
    indirect_fish_and_amphibians = 0.47
    indirect_invertebrates = 0.228
    indirect_plants = 3700          
    
    if inStep == 1:
        thresholdsDicts = {'step1':{'step1max':max_threshold}}
    elif inStep == 2: 
        # Find reference for these endpoints (email?)          
        thresholdsDicts = {'Aquatic-dependent Birds': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates}, 
            'Aquatic-dependent Mammals': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates},
            'Aquatic Amphibians': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Aquatic Plants - vascular': {"direct_plants": direct_plants, "indirect_plants": indirect_plants},
            'Aquatic Plants - non-vascular' : {"direct_plants": direct_plants, "indirect_plants": indirect_plants},
            'Aquatic plants non-vascular' : {"direct_plants": direct_plants, "indirect_plants": indirect_plants, "indirect_plants": indirect_plants},
            'Aquatic Reptiles': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Freshwater Fish': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Freshwater Invertebrates': {"direct_aquatic_invertebrates": direct_aquatic_invertebrates, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Freshwater Mammals': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Marine Fish': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants}, 
            'Marine Invertebrates': {"direct_aquatic_invertebrates": direct_aquatic_invertebrates, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Marine Mammals': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Marine Reptiles': {"direct_fish_and_amphibians": direct_fish_and_amphibians, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants},
            'Mollusks': {"direct_aquatic_invertebrates": direct_aquatic_invertebrates, "indirect_invertebrates": indirect_invertebrates, "indirect_plants": indirect_plants} }      
            
    # Read in Concentration Table Per Use Per HUC2
    #email Katrina White 11/3/2015 filename: 'Appendix Y1 Aquatic EECs Step1_2.xlsx'
    use_dict = {}
    huc2s = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18']
    
    #huc2s = ['01','02','03']
        
    with open(chemical_threshold_Fn) as f:
        for line in f:
            line = line[:-1]
            vals = line.split(',')
            for i in range(0,18):
                h, e = huc2s[i],vals[i+1]
                use_dict[h] = e
    
    #species_list = glob.glob(mainpath + 'csv_streams' + '/*Streams*.csv')
    species_list = glob.glob(mainpath + 'CSV' + '/*Streams*.csv')  
                                                               
    # loop through species list         
    for index, row in species_file.iterrows():
        huc2 = (str(row['HUC_2'])).zfill(2)
        if step == 1:
            ESA_group = 'step1'  # No ESA Group for Step 1 (use overall max)
        else:
            ESA_group = row['ESA_Group']
        entityID = row['ENTITYID']
        species_name = row['COMNAME']
        #h = row['HUC_2']
                   
        # loop through endpoints 
        for toxtest, threshold in thresholdsDicts[ESA_group].iteritems():                  
            print(huc2)
            if huc2 in use_dict:
                concentration = float(use_dict[huc2])
                #RQ = concentration / threshold
                #DF = 1 / RQ  ....or....
                DF = threshold / concentration
                                 
            #Need to loop through the nhd+ processing units for hucs 3 and 10 and skip hucs 19 - 21: 
            if huc2 == '03':
                huclist = ['03S','03N','03W']
            elif huc2 == '10':
                huclist = ['10U','10L']
            elif huc2 in ['19','20','21']:
                    huclist = []
            else:
                huclist = [huc2]
                
            for huc in huclist:   
                fn = ca3t_path + nhdplus_use_accumuation_Fn + '_' + huc + '.csv'
                columns=['COMID','0_local','1_local','0_all_upstream','1_all_upstream','LocalFrac','FullFrac']
                nhd_concentration_table = pd.read_csv(fn, ',',names=columns,header=0)
                                                             
                # Select all streams that exceed DF
                #upstream = nhd_concentration_table[(nhd_concentration_table.FullFrac_1 > DF)]
                upstream = nhd_concentration_table[(nhd_concentration_table.FullFrac > DF)]
                #print('length of upstream ' + str(len(upstream)))
                # Also include all streams inside use area ( PCA > 0) - "initial area of concern" does not depend on species location
                #within_basin = nhd_concentration_table[(nhd_concentration_table.LocalFrac_1 > 0)]
                within_basin = nhd_concentration_table[(nhd_concentration_table.LocalFrac > 0)]
                # combine within basin and upstream streams
                #print('length of within basin ' + str(len(within_basin)))
                nhd_all = within_basin.merge(upstream,left_on='COMID',right_on='COMID',how='outer')
                # Just need list of COMIDS    
                nhd_lut = nhd_all['COMID']
                n = nhd_lut.to_frame()
                #print('length of n: ',str(len(n)))
                                
                # NEXT: Species Range and Critical Habitat files                
                #species_CH_fn = mainpath + '/CSV/CH_Streams_' + str(entityID) + '.csv'
                species_CH_fn = mainpath + 'CSV/CH_Streams_' + str(entityID) + '.csv'
                #species_range_fn = mainpath + '/CSV/Streams_' + str(entityID) + '.csv'
                species_range_fn = mainpath + 'CSV/R_Streams_' + str(entityID) + '.csv'
                                                                                                  
                # Process species range file
                
                species_columns = ['COMID','FDATE','RESOLUTION','GNIS_ID','GNIS_NAME','LENGTHKM','REACHCODE','FLOWDIR','WBAREACOMI','FTYPE','FCODE','SHAPE_LENG','ENABLED','GNIS_NBR']
                    
                try:
                    # Compare exceeding streams against species occurance (cooccurence)
                    species_range = pd.read_csv(species_range_fn, sep=',',names=species_columns,header=0)
                    sp_pct_cooccur,sp_km_cooccur,sp_total_km = find_cooccurrence(species_range,n)  
                    outfile.write(str(entityID) + ',' + species_name + ',' + ESA_group + ',' + toxtest + ',range,' + huc[:2] + ',' + use + ',' + str(sp_pct_cooccur) + ',' + str(sp_km_cooccur) + ',' + str(sp_total_km) + '\n')    
                except:
                    print('co occur thing went south')
                    missing_range.add(species_name)
                                    
                # Process critical habitat file when available
                try:
                    species_CH = pd.read_csv(species_CH_fn, sep=',',names=species_columns,header=0)
                    sp_pct_cooccur,sp_km_cooccur,sp_total_km = find_cooccurrence(species_CH,n)  
                    fout.write(str(entityID) + ',"' + species_name + '",' + ESA_group + ',' + toxtest + ',critical habitat,' + huc2[:2] + ',' + use + ',' + str(sp_pct_cooccur) + ',' + str(sp_km_cooccur) + ',' + str(sp_total_km) + '\n')    
                except:
                    missing_CH.add(species_name)
                
    # Write missing data to range and CH log files
    range_log.write("Missing Species Range Files" + '\n')
    CH_log.write("Missing Species Critical Habitat Files" + '\n')
    for s in missing_range:
        range_log.write(species_name + '\n') 
    for s in missing_CH:
        CH_log.write(species_name + '\n')     
      
if __name__ == "__main__":
    
    chemical = 'diazinon'
    date = '122116_CH_only'
    pest_uses = {'orchards': 'cdl_1015_70x2','vegetables': 'cdl_1015_60x2','nurseries':'conus_nurseri'} # use and corresponding use layer name (Steve)
    #pest_uses = {'alluses': 'diazinon'}
    #pest_uses = {'orchards': 'cdl_1015_70x2'}
    step = 2
        
    mainpath = 'C:/Users/mthawley/Documents/ESA/DDM/diazinon_redo_dec2016/'
    #mainpath = 'C:/EPA/ESA/DDM_Diazinon_Dec2016/'
    
    # diazinon input data from email Katrina White 11/3/2015 filename: 'Appendix Y1 Aquatic EECs Step1_2.xlsx'
    #chemical_specific_input_concentrations_Fn = mainpath + chemical + '_concentrations' + '_' + date + '.txt'
    chemical_specific_input_concentrations_Fn = mainpath + 'diazinon_concentration_file_121216.txt'
    
    # Species file list - use latest and greatest from Jen
    species_location_input_fn = mainpath + 'DD_SpeciesTables_20161214.csv'
    #species_location_input_fn = mainpath + 'speciesv2_10077.csv'
       
    # Output file setup
    f = mainpath + chemical + '_results_step' + str(step) + '_' + date + '.txt'
    fout = open(f,'w')
    fout.write("entityID,species,ESA_group,toxthreshold,range_CH,huc2,use,pct_cooccur,km_cooccur,km_spc_total\n")
     
    # log files for missing species data (maybe don't need these?)     
    f = mainpath + chemical + '_missing_range_data_' + date + '.txt'
    missingRlog = open(f,'w')
    f = mainpath +  chemical + '_missing_CH_data_' + date + '.txt'
    missingCHlog = open(f,'w')
            
    missing_range = set()
    missing_CH = set()
    
    ca3t_path = mainpath + 'DDM_12_2016/'
    for use in pest_uses:
        print(use)  
        nhdplus_use_accumuation_Fn = pest_uses[use]
        downstream(chemical_specific_input_concentrations_Fn,nhdplus_use_accumuation_Fn,step,fout,missingRlog,missingCHlog,species_location_input_fn)
        
    fout.close()
    missingRlog.close()
    missingCHlog.close()      
